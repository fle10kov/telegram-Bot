from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, ContextTypes, filters
)

INPUT_AMOUNT = 1

def main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üõí Poizon", url="https://www.poizon.com/")],
        [InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ üßæ", callback_data='order')],
        [InlineKeyboardButton("–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä üí∞ CNY‚ÜíRUB", callback_data='convert')],
        [InlineKeyboardButton("Avito üõçÔ∏è",url="https://www.avito.ru/user/f9d2bee70d63a9fe3eec7e93041d7693/profile?src=sharing")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard()
    )

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìå –ù–∞–ø–∏—à–∏ / —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É. üìå –í –∫–æ–Ω–≤–µ—Ä—Ç–æ—Ä–µ —Ç—ã —Å–º–æ–∂–µ—à—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞. üìå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ tg –Ω–∞—à–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Ä–∞—Å—Å—á—ë—Ç–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ –±–æ—Ç–∞.")

async def site(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç Poizon: https://www.poizon.com/")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Tg: @fingerdaddy (–ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã) üíπ –ö—É—Ä—Å: 12.5 RUB")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == 'order':
        await query.edit_message_text("Tg: @fingerdaddy (–ü–µ—Ä–µ—Å—ã–ª–∞–π —Ä–∞—Å—á—ë—Ç, –æ—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑üòÉ)", reply_markup=main_keyboard())
    elif data == 'convert':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —é–∞–Ω—è—Ö (–æ—Ç 0 –¥–æ 1 000 000 000):")
        return INPUT_AMOUNT

async def convert_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.replace(',', '.').strip()
    try:
        amount_cny = float(text)
        if not (0 <= amount_cny <= 1_000_000_000):
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 1 000 000 000:")
            return INPUT_AMOUNT
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
        return INPUT_AMOUNT

    exchange_rate = 12.5
    result_rub = amount_cny * exchange_rate + 1000

    await update.message.reply_text(
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {amount_cny} CNY = {result_rub:.2f} RUB (—Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ 3% –∏ –¥–æ—Å—Ç–∞–≤–∫–∏)",
        reply_markup=main_keyboard()
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_keyboard())
    return ConversationHandler.END

def main():
    TOKEN = "#"

    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern='^convert$')],
        states={
            INPUT_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, convert_currency)]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_user=True
    )

    order_handler = CallbackQueryHandler(button_handler, pattern='^order$')

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("info", info))
    application.add_handler(CommandHandler("site", site))
    application.add_handler(CommandHandler("help", help_command))

    application.add_handler(conv_handler)
    application.add_handler(order_handler)
    application.add_handler(CallbackQueryHandler(button_handler))

    application.run_polling()

if __name__ == "__main__":
    main()